openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/user/change/password:
    post:
      summary: 'User change password.'
      operationId: userChangePassword
      description: "Within the config file, you are required to determine the number\nof previously used passwords a User is not allowed to use anymore\nby setting <b>password.check_all</b> to <b>TRUE/FALSE</b> or to an <b>int</b>\nvalue and <b>password.number</b> to a corresponding <b>int</b>\nvalue as well.\n\nYou can choose to notify a User whenever a password is changed by setting\n<b>password.notify.change</b> to <b>TRUE</b>"
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n }\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: "The user's password."
                  example: Ex@m122p$%l6E
                  nullable: false
                password:
                  type: string
                  description: 'The password for user authentication must contain uppercase, lowercase, symbols, numbers.'
                  example: '@wE3456qas@$'
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Must match <small class="badge badge-blue">password</small> Field.'
                  example: '@wE3456qas@$'
                  nullable: false
              required:
                - current_password
                - password
                - password_confirmation
  /api/user/edit/profile:
    post:
      summary: 'User edit profile.'
      operationId: userEditProfile
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n }\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The user fullname.'
                  example: 'John Doe'
                  nullable: false
                email:
                  type: string
                  description: 'The user email.'
                  example: johndoe@example.com
                  nullable: false
              required:
                - name
                - email
  /api/user/create-two-factor:
    post:
      summary: 'Create 2FA.'
      operationId: create2FA
      description: "To enable Two-Factor Authentication for the User,\nhe/she must sync the Shared Secret between its Authenticator\napp and the application."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"qr_code\": string,\n     \"uri\": string,\n     \"string\": string,\n }\n}"
      tags:
        - 'Auth APIs'
  /api/user/confirm-two-factor:
    post:
      summary: 'Confirm 2FA.'
      operationId: confirm2FA
      description: 'Recovery codes will be generated if code is invalid.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string,\n     \"codes\": array,\n }\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: numeric
                  description: 'The authenticator code.'
                  example: '123 456'
                  nullable: false
              required:
                - code
  /api/user/disable-two-factor:
    post:
      summary: 'Disable 2FA.'
      operationId: disable2FA
      description: 'To disable Two-Factor Authentication for the User.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string,\n }\n}"
      tags:
        - 'Auth APIs'
  /api/user/current-recovery-codes:
    post:
      summary: 'Get 2FA recovery codes.'
      operationId: get2FARecoveryCodes
      description: 'The User can retrieve current recovery codes.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string,\n     \"codes\": array,\n }\n}"
      tags:
        - 'Auth APIs'
  /api/user/new-recovery-codes:
    post:
      summary: 'New 2FA recovery codes.'
      operationId: new2FARecoveryCodes
      description: "The User can generate a fresh batch of codes which replaces\nthe previous batch."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string,\n     \"codes\": array,\n }\n}"
      tags:
        - 'Auth APIs'
  /api/user/users/create:
    post:
      summary: 'Create user.'
      operationId: createUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: integer
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: 10
                  nullable: false
                first_name:
                  type: string
                  description: 'The first name of the user.'
                  example: John
                  nullable: false
                last_name:
                  type: string
                  description: 'The last name of the user.'
                  example: Doe
                  nullable: false
                email:
                  type: string
                  description: 'The email of the user.'
                  example: johndoe@xyz.com
                  nullable: false
                phone:
                  type: string
                  description: 'The phone of the user.'
                  example: '08012345678'
                  nullable: false
                model:
                  type: string
                  description: 'The model of user must either be super_admin, admin, auditor or marketer.'
                  example: admin
                  nullable: false
              required:
                - first_name
                - last_name
                - email
                - phone
                - model
  /api/user/users/assign:
    put:
      summary: 'Assign branch to user.'
      operationId: assignBranchToUser
      description: 'Every staff need to be assigned a branch to work from.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The id of the user.'
                  example: '1'
                  nullable: false
                branch_id:
                  type: string
                  description: 'The branch_id of the branch to assign user to.'
                  example: '1'
                  nullable: false
              required:
                - id
                - branch_id
  /api/user/users/delete:
    delete:
      summary: 'Delete user.'
      operationId: deleteUser
      description: ''
      parameters:
        -
          in: header
          name: X-Shipment-Mode
          description: ''
          example: SFN
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The id of the user.'
                  example: '1'
                  nullable: false
              required:
                - id
  '/api/user/users/read/{id}':
    get:
      summary: 'Read user.'
      operationId: readUser
      description: "Fetch a record or records from the user table.\nThe <b>id</b> param is optional but can either be a <b>string|null|int</b>\n\nIf the <b>id</b> has a <b>null</b> value the records will be paginated.\nThe returned page size is be set from <b>api.paginate.user_kyc.pageSize</b>\nconfig.\n\nIf the <b>id</b> is a <b>string</b> value it can only be set as <b>'all'</b>.\nThis will return all the records without being paginated.\n\nIf the <b>id</b> value is an <b>integer</b> it will try to fetch a single\nmatching record."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The ID of the record.'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: all
  '/api/user/users/model_read/{model}/{id}':
    get:
      summary: 'Read user by user model.'
      operationId: readUserByUserModel
      description: "Fetch a record or records from the user table.\nThe <b>id</b> param is optional but can either be a <b>string|null|int</b>\n\nIf the <b>id</b> has a <b>null</b> value the records will be paginated.\nThe returned page size is be set from <b>api.paginate.user.pageSize</b>\nconfig.\n\nIf the <b>id</b> is a <b>string</b> value it can only be set as <b>'all'</b>.\nThis will return all the records by user model without being paginated.\n\nIf the <b>id</b> value is an <b>integer</b> it will try to fetch a single\nmatching record."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
    parameters:
      -
        in: path
        name: model
        description: ''
        example: super_admin
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'Optional parameter. The ID of the record.'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: all
  /api/user/users/update:
    put:
      summary: 'Update user.'
      operationId: updateUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The id of the user.'
                  example: '1'
                  nullable: false
                first_name:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: ejrwsdkgjguek
                  nullable: false
                middle_name:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: mpexxtmlldrhyfxybazge
                  nullable: true
                last_name:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: cjzrwoqmzqcki
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: kjohnston@example.org
                  nullable: false
                phone:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: qkwmchzilg
                  nullable: false
                performed_action:
                  type: string
                  description: 'The action performed on the user. approved or rejected.'
                  example: approved
                  nullable: false
                reason:
                  type: string
                  description: 'The is field is required if you are rejecting the kyc.'
                  example: 'The image is not clear'
                  nullable: false
              required:
                - id
                - performed_action
  /api/user/users/suspend:
    put:
      summary: 'Suspend user.'
      operationId: suspendUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The id of the user.'
                  example: '1'
                  nullable: false
                active:
                  type: integer
                  description: 'The status of the user. 1 or 0.'
                  example: 0
                  nullable: false
              required:
                - id
                - active
  /api/user/branch/create:
    post:
      summary: 'Create Branch.'
      operationId: createBranch
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the Branch.'
                  example: Nkpor
                  nullable: false
                address:
                  type: string
                  description: 'The address of the Branch.'
                  example: 'No 12 Oguta Road, Onitsha'
                  nullable: false
              required:
                - name
                - address
  /api/user/branch/delete:
    delete:
      summary: 'Delete Branch.'
      operationId: deleteBranch
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The id of the Branch.'
                  example: '1'
                  nullable: false
              required:
                - id
  '/api/user/branch/read/{id}':
    get:
      summary: 'Read Branch.'
      operationId: readBranch
      description: "Fetch a record or records from the Branchs table.\nThe <b>id</b> param is optional but can either be a <b>string|null|int</b>\n\nIf the <b>id</b> has a <b>null</b> value the records will be paginated.\nThe returned page size is be set from <b>api.paginate.user_address.pageSize</b>\nconfig.\n\nIf the <b>id</b> is a <b>string</b> value it can only be set as <b>'all'</b>.\nThis will return all the records without being paginated.\n\nIf the <b>id</b> value is an <b>integer</b> it will try to fetch a single\nmatching record."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The ID of the record.'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: all
  /api/user/branch/update:
    put:
      summary: 'Update Branch.'
      operationId: updateBranch
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The id of the Branch.'
                  example: '1'
                  nullable: false
                name:
                  type: The
                  description: 'name for the Branch.'
                  example: John
                  nullable: false
                address:
                  type: The
                  description: 'address of the Branch.'
                  example: 'No 31 Isunjaba Street, Awada'
                  nullable: false
                active:
                  type: The
                  description: 'status of the Branch.'
                  example: '0 or 1'
                  nullable: false
              required:
                - id
  '/api/user/wallet/read/{id}':
    get:
      summary: 'Read Wallet.'
      operationId: readWallet
      description: "Fetch a record or records from the Wallets table.\nThe <b>id</b> param is optional but can either be a <b>string|null|int</b>\n\nIf the <b>id</b> has a <b>null</b> value the records will be paginated.\nThe returned page size is be set from <b>api.paginate.user_address.pageSize</b>\nconfig.\n\nIf the <b>id</b> is a <b>string</b> value it can only be set as <b>'all'</b>.\nThis will return all the records without being paginated.\n\nIf the <b>id</b> value is an <b>integer</b> it will try to fetch a single\nmatching record."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The ID of the record.'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: all
  '/api/user/customer_wallet/read/{id}':
    get:
      summary: 'Read CustomerWallet.'
      operationId: readCustomerWallet
      description: "Fetch a record or records from the CustomerWallets table.\nThe <b>id</b> param is optional but can either be a <b>string|null|int</b>\n\nIf the <b>id</b> has a <b>null</b> value the records will be paginated.\nThe returned page size is be set from <b>api.paginate.user_address.pageSize</b>\nconfig.\n\nIf the <b>id</b> is a <b>string</b> value it can only be set as <b>'all'</b>.\nThis will return all the records without being paginated.\n\nIf the <b>id</b> value is an <b>integer</b> it will try to fetch a single\nmatching record."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The ID of the record.'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: all
  /api/user/customer/create:
    post:
      summary: 'Create Customer.'
      operationId: createCustomer
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: integer
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: 17
                  nullable: false
                first_name:
                  type: string
                  description: 'Must not be greater than 200 characters.'
                  example: ycppwmnplrncn
                  nullable: false
                surname:
                  type: string
                  description: 'Must not be greater than 200 characters.'
                  example: lrtjpfkdjqlbhix
                  nullable: false
                middle_name:
                  type: string
                  description: ''
                  example: itaque
                  nullable: true
                dob:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2024-12-18T19:01:34'
                  nullable: true
                sex:
                  type: string
                  description: ''
                  example: male
                  nullable: true
                  enum:
                    - male
                    - female
                resident_state:
                  type: string
                  description: ''
                  example: enim
                  nullable: true
                resident_lga:
                  type: string
                  description: ''
                  example: incidunt
                  nullable: true
                resident_address:
                  type: string
                  description: ''
                  example: sequi
                  nullable: true
                occupation:
                  type: string
                  description: ''
                  example: qui
                  nullable: true
                office_address:
                  type: string
                  description: ''
                  example: vel
                  nullable: true
                state:
                  type: string
                  description: ''
                  example: omnis
                  nullable: true
                lga:
                  type: string
                  description: ''
                  example: ut
                  nullable: true
                hometown:
                  type: string
                  description: ''
                  example: temporibus
                  nullable: true
                phone:
                  type: string
                  description: ''
                  example: et
                  nullable: false
                next_of_kin:
                  type: string
                  description: ''
                  example: quidem
                  nullable: true
                relationship:
                  type: string
                  description: ''
                  example: id
                  nullable: true
                nok_phone:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                acc_no:
                  type: string
                  description: ''
                  example: et
                  nullable: true
                group:
                  type: string
                  description: ''
                  example: commodi
                  nullable: true
                sb_card_no_from:
                  type: string
                  description: ''
                  example: corrupti
                  nullable: true
                sb_card_no_to:
                  type: string
                  description: ''
                  example: aut
                  nullable: true
                sb:
                  type: string
                  description: ''
                  example: dicta
                  nullable: true
                initial_unit:
                  type: string
                  description: ''
                  example: accusantium
                  nullable: true
                bank_name:
                  type: string
                  description: ''
                  example: ab
                  nullable: true
                bank_code:
                  type: string
                  description: ''
                  example: ratione
                  nullable: true
                account_name:
                  type: string
                  description: ''
                  example: pariatur
                  nullable: true
                account_number:
                  type: string
                  description: ''
                  example: ad
                  nullable: true
                daily_amount:
                  type: string
                  description: ''
                  example: laudantium
                  nullable: true
                name:
                  type: string
                  description: 'The name of the Customer.'
                  example: John
                  nullable: false
              required:
                - first_name
                - surname
                - phone
                - name
  /api/user/customer/delete:
    delete:
      summary: 'Delete Customer.'
      operationId: deleteCustomer
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The id of the Customer.'
                  example: '1'
                  nullable: false
              required:
                - id
  '/api/user/customer/read/{id}':
    get:
      summary: 'Read Customer.'
      operationId: readCustomer
      description: "Fetch a record or records from the Customers table.\nThe <b>id</b> param is optional but can either be a <b>string|null|int</b>\n\nIf the <b>id</b> has a <b>null</b> value the records will be paginated.\nThe returned page size is be set from <b>api.paginate.user_address.pageSize</b>\nconfig.\n\nIf the <b>id</b> is a <b>string</b> value it can only be set as <b>'all'</b>.\nThis will return all the records without being paginated.\n\nIf the <b>id</b> value is an <b>integer</b> it will try to fetch a single\nmatching record."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The ID of the record.'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: all
  /api/user/customer/update:
    put:
      summary: 'Update Customer.'
      operationId: updateCustomer
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"success\": true,\n\"status_code\": 200,\n\"message\": string\n\"data\": {}\n}"
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The id of the Customer.'
                  example: '1'
                  nullable: false
                first_name:
                  type: string
                  description: 'Must not be greater than 200 characters.'
                  example: ofwbhfpmbhjwjteqjlks
                  nullable: false
                surname:
                  type: string
                  description: 'Must not be greater than 200 characters.'
                  example: ahcwwcncfxg
                  nullable: false
                middle_name:
                  type: string
                  description: ''
                  example: fugiat
                  nullable: false
                dob:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2024-12-18T19:01:34'
                  nullable: false
                sex:
                  type: string
                  description: ''
                  example: male
                  nullable: false
                  enum:
                    - male
                    - female
                resident_state:
                  type: string
                  description: ''
                  example: aut
                  nullable: false
                resident_lga:
                  type: string
                  description: ''
                  example: harum
                  nullable: false
                resident_address:
                  type: string
                  description: ''
                  example: omnis
                  nullable: false
                occupation:
                  type: string
                  description: ''
                  example: sed
                  nullable: false
                office_address:
                  type: string
                  description: ''
                  example: cum
                  nullable: false
                state:
                  type: string
                  description: ''
                  example: sequi
                  nullable: false
                lga:
                  type: string
                  description: ''
                  example: id
                  nullable: false
                hometown:
                  type: string
                  description: ''
                  example: voluptatem
                  nullable: false
                phone:
                  type: string
                  description: 'Must not be greater than 13 characters.'
                  example: ttvsrlx
                  nullable: false
                next_of_kin:
                  type: string
                  description: ''
                  example: vel
                  nullable: false
                relationship:
                  type: string
                  description: ''
                  example: asperiores
                  nullable: false
                nok_phone:
                  type: string
                  description: ''
                  example: sint
                  nullable: false
                acc_no:
                  type: string
                  description: ''
                  example: dolore
                  nullable: false
                branch:
                  type: string
                  description: ''
                  example: recusandae
                  nullable: false
                group:
                  type: string
                  description: ''
                  example: magni
                  nullable: false
                sb_card_no_from:
                  type: string
                  description: ''
                  example: odit
                  nullable: false
                sb_card_no_to:
                  type: string
                  description: ''
                  example: possimus
                  nullable: false
                sb:
                  type: string
                  description: ''
                  example: dignissimos
                  nullable: false
                initial_unit:
                  type: string
                  description: ''
                  example: labore
                  nullable: false
                bank_name:
                  type: string
                  description: ''
                  example: architecto
                  nullable: false
                bank_code:
                  type: string
                  description: ''
                  example: quis
                  nullable: false
                account_name:
                  type: string
                  description: ''
                  example: blanditiis
                  nullable: false
                account_number:
                  type: string
                  description: ''
                  example: quaerat
                  nullable: false
                daily_amount:
                  type: string
                  description: ''
                  example: ea
                  nullable: false
                name:
                  type: string
                  description: 'The name for the Customer.'
                  example: John
                  nullable: false
              required:
                - id
                - name
  /api/auth/logout:
    post:
      summary: 'User logout.'
      operationId: userLogout
      description: 'This API logs a user out of a single session'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n }\n}"
      tags:
        - 'Auth APIs'
  /api/auth/logout-from-all-sessions:
    post:
      summary: 'User logout from all sessions.'
      operationId: userLogoutFromAllSessions
      description: 'This API logs a user out of every session and clears all user tokens'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n }\n}"
      tags:
        - 'Auth APIs'
  /api/auth/resend/verify/email:
    post:
      summary: 'User resend email verification.'
      operationId: userResendEmailVerification
      description: 'This endpoint is used to generate and send via email a URL for User email verification to a registered User.'
      parameters:
        -
          in: query
          name: id
          description: '<small class="badge badge-blue">id</small> Field must belong to a registered User.'
          example: '1'
          required: true
          schema:
            type: string
            description: '<small class="badge badge-blue">id</small> Field must belong to a registered User.'
            example: '1'
            nullable: false
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n }\n}"
      tags:
        - 'Auth APIs'
  /api/change/pin:
    post:
      summary: 'Change Pin.'
      operationId: changePin
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_pin:
                  type: string
                  description: ''
                  example: aperiam
                  nullable: false
                pin:
                  type: string
                  description: 'Must not be greater than 4 characters.'
                  example: rvr
                  nullable: false
              required:
                - current_pin
                - pin
      security: []
  '/api/pin/required/{uuid}':
    post:
      summary: 'Pin Authentication.'
      operationId: pinAuthentication
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: c30904de-2041-31c9-aae0-d0972f9007cb
        required: true
        schema:
          type: string
  /api/user:
    get:
      summary: ''
      operationId: getApiUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/user/user:
    get:
      summary: ''
      operationId: getApiUserUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/auth/register:
    post:
      summary: 'User form registration.'
      operationId: userFormRegistration
      description: "Within the config file, you are required to determine whether a\nuser should recieve welcome and verification emails after\nregistration by setting <b>registration.notify.welcome</b> to <b>TRUE</b> and\n<b>registration.notify.verify</b> to <b>TRUE</b> respectively.\nYou can also set <b>registration.autologin</b> to <b>TRUE</b>."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "//if autologin is set to FALSE\n\n{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n }\n}\n\n//if autologin is set to TRUE\n\n{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n     \"access_token\": string\n }\n}"
      tags:
        - 'No Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: oupgctl
                  nullable: false
                email:
                  type: string
                  description: 'The email of the user.'
                  example: johndoe@xyz.com
                  nullable: false
                password:
                  type: string
                  description: 'The password for user authentication must contain uppercase, lowercase, symbols, numbers.'
                  example: Ex@m122p$%l6E
                  nullable: false
                first_name:
                  type: string
                  description: 'The first name of the user.'
                  example: 'John Doe'
                  nullable: false
                last_name:
                  type: string
                  description: 'The full name of the user.'
                  example: 'John Doe'
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Must match <small class="badge badge-blue">password</small> Field.'
                  example: Ex@m122p$%l6E
                  nullable: false
              required:
                - name
                - email
                - password
                - first_name
                - last_name
                - password_confirmation
      security: []
  /api/auth/login:
    post:
      summary: 'User form login.'
      operationId: userFormLogin
      description: "You can choose to notify a User whenever there has been a Login by setting\n<b>password.notify.change</b> to <b>TRUE</b> Within the config file,\n\nMake sure to retrieve <small class=\"badge badge-blue\">access_token</small> after login for User authentication"
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n     \"access_token\": string\n }\n}"
      tags:
        - 'No Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email of the user.'
                  example: admin@divineglobalgrowth.com
                  nullable: false
                password:
                  type: string
                  description: 'The password for user authentication must contain uppercase, lowercase, symbols, numbers.'
                  example: password
                  nullable: false
                remember_me:
                  type: integer
                  description: 'Could be set to 0 or 1.'
                  example: 1
                  nullable: false
              required:
                - email
                - password
      security: []
  '/api/auth/verify/email/{id}':
    get:
      summary: 'User email verification.'
      operationId: userEmailVerification
      description: "This endpoint must have a valid laravel generated URL signature to work.\nIt is automatically sent after a successful registration and\n<b>registration.notify.verify</b> is set to <b>TRUE</b> within\nthe config file."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n }\n}"
      tags:
        - 'No Auth APIs'
      security: []
    parameters:
      -
        in: path
        name: id
        description: "<small class=\"badge badge-blue\">id</small>\nField must belong to a registered User."
        example: '1'
        required: true
        schema:
          type: string
  /api/auth/forgot/password:
    post:
      summary: 'User forgot password.'
      operationId: userForgotPassword
      description: 'The user must enter a registered email.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n }\n}"
      tags:
        - 'No Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email of the user.'
                  example: johndoe@xyz.com
                  nullable: false
              required:
                - email
      security: []
  /api/auth/reset/password:
    post:
      summary: 'User password reset.'
      operationId: userPasswordReset
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"status\": \"success\",\n\"status_code\": 200,\n\"data\": {\n     \"message\": string\n }\n}"
      tags:
        - 'No Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email of the user.'
                  example: johndoe@xyz.com
                  nullable: false
                password:
                  type: string
                  description: 'The password for user authentication must contain uppercase, lowercase, symbols, numbers.'
                  example: Ex@m122p$%l6E
                  nullable: false
              required:
                - email
                - password
      security: []
tags:
  -
    name: 'Auth APIs'
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'No Auth APIs'
    description: ''
